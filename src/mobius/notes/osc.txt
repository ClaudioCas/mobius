----------------------------------------------------------------------
Protocol Notes
----------------------------------------------------------------------

Packet
  - the unit of communication, contains either a Message or a Bundle

Bundle
  - contains one or more Messages or other Bundles

Message
  - 3 parts: Address Pattern, Type Tag, Arguments

Address Pattern
   - a string beginning with /
   - in simple cases this directly identifies a Method, but it
     may contain wildcards that identify more than one Method

Type Tag
   - optional, string begging with a comma
   - defines the types of the arguments, e.g. i=int32, f=float32
   - the core types are i, f, s, b (int32, float32, string, blob)
   - there are extended apparently "non standard" types for 
     (int64, timetag, float64, infinitum, begin array, end array, etc.)

Arguments
   - contiguous sequence of the binary representation of each argument
   - if type tag isn't found, you can use the size field of the packet
     or the bundle element to determine when you're done parsing args

Address Space
   - the "tree" arrangmenet of Methods	
   - a lot like URLs, leaf tokens are method names and interior
     tokens are "containers"
   - these characters are not allowed in addresses:
      space # * , / ? [ ] { }

Message Dispatch
   - call every method in the address space that matches the address pattern
   - wildcards:
     ? single character
     * zero or more characters
     [abc] match a, b, or c
     [a-z] match a range of ascii characters
     [!...] negates the match
     {foo,bar} matches "foo" or "bar"

   - there is no requirement to implement wildcards, this seems superfluous

Time Tags
  - when a packet is received containing a Message it is processed immediately
  - if the packet contains a bundle, the time tag should control when
    the bundle is processed
  - time tags are 64 bits, 32 with seconds since midnight January 1, 1900
    and the other 32 with fractional seconds with a precision of about
    200 picoseconds
  - obvoiusly all computers in the network need to start with a synchronized
    base time and stable clock
  - can ignore this for Mobius

----------------------------------------------------------------------
TouchOSC Address Space
----------------------------------------------------------------------
  
This client has it's own hard coded address space, so to use this
with Mobius there will need to be a mapping layer.  

The first container is the page number:

    /<page>

Unfortunately the page numbers are not unique among the layouts.
So bindings for one layout will be confused if you switch to another layout.

Layout: Keys

  /1 keyboard
      /1/push1 - /1/push12
      get message on both down and up transitions, the argument looks like
      "velocity" but it's fixed 

  /2 another keyboard
      /1/push1 - /1/push12
      same as /1

  /3 varous sliders buttons, and a rotary
      /3/fader1 - /3/fader2, one float arg
      /3/toggle1 - /3/toggle3, down and up transitions, toggle
      /3/push1 - /3/push4, down and up transitions, momentary
      /3/rotary1 float arg, looks like a pan control

Issues:

   Will need to know which represent continuous controls, which
   are toggle buttons, and which are momentary.  Can do this with
   naming conventions for TouchOSC but this isn't general.

   For toggle buttons will have to ignore the up transition.

Other Layouts use push, toggle, and rotary.  Beatmachine uses multitoggle,
multifader, and xy.

Simple layout page 4 has an 8x8 grid for monomish control but can't
do multicolors like the Launchpad.

Complex bi-directional stuff will need a ControlSurface implementation.
Basically anything with toggle or multitoggle.

Most faders and rotaries can be bound directly to contuous parameters.

----------------------------------------------------------------------
Mobius Address Space
----------------------------------------------------------------------

Binding scopes: global, track group

First container has the binding scope

  /global
  /1       (track)
  /A	   (group)

Don't really like global, it implies all?  Is "current" or "active" better?

Second container could be target type: function, control, parameter, 
setup, preset, bindings, UIControl, UIConfig.

Some combinations don't make sense, some parameters are always global.
Bindigns, UIControl, and UIConfig are always global.

   /global/control/pan
   /global/function/record
   /global/parameter/selectedTrack
   /1/parameter/quantize
   /global/uiControl/nextParameter
   /A/function/reset

When Mobius is listening for OSC it accepts anything.
Do we need a prefix?

    /mobius/global/control/pan

For bi-directional feedback, a selection of binding targets will
have to be registered.  This is a similar process for
registering plugin parameters but the registration isn't required
just to receive them, only to send them.

    <Binding target='control' name='feedback' trigger='osc' value='10'/>

What's odd here is that the value isn't necessary, the scope, target, and
name attributes define the OSC method address we don't need another
unique identifier.

It would be simpler in the model to just have a list of OSC export
specs, but the UI would be almost identical to host parameters.

   <OscExports>
     <OscExport method='/mobius/global/control/feedback'/>
     <OscExport method='/mobius/1/control/output'/>
     ...
   </OscExports>

This feels more logical especially when we consider OSC input mapping...

A possible optimization is that we could automatically start exporting
anything we receive a request for.  Example, nothing is exported
initially, as soon as we recieve /mobius/global/control/feedback 
we start exporting that.

For SUS functions we need to know the difference between down and up.

TouchOSC conveys this with an argument, 1.0 for down and 0.0 for up,
but there may be other conventions.  

If the mapping is being done by Max it may be desireable to just
send Mobius messages and not have Mobius do any mapping.  In that case
we either need arguments:

   /global/function/record down                 (default)
   /global/function/record up

or extend the path
 
   /global/function/record/down
   /global/function/record/up

or have a generic function runner similar to SooperLooper:

   /global/function/down record
   /global/function/up record


Scripts will need to support arbitrary arguments:

   /mobius/function/Something+With+Spaces 0 abc 4.2

Could just pack them all up as a string and send it through the expression
parser, this would work more like Mobius scripts.  !! Need an arglist
concept for script calls. 

I'm liking /global less and less.  We can make it optional
but the notion of "containers" gets muddy:

   /mobius/control/output
   /mobius/1/control/output
   



----------------------------------------------------------------------
Monome
----------------------------------------------------------------------

Monome with serialio sends one /box/press message with arguments for
the x, y coordinates and up/down state.

   /box/press <x> <y> <state>

where <state> is 0 or 1.


Monome also has "adc" which I think means analog to digital converter,
probably for continuous controls.  It sends:

   /box/adc <n> <value>

where <n> is 0 to 3 for the 4 adc's and value is a float from 0 to 1.

To use Monome/serialio with Mobius we would have to use the combination
of /box/press AND the first two arguments as the trigger path and know
that the third arg represents down, up like TouchOSC.  This could
be done with a keyArguments number set to 2 which converts the method to:

    /box/press/<x>/<y> <state>

To do this generically we would have to have a model to define the meaning
of each argument within a predefined set of semantics.  To be totally
general would require some kind of scripting language or a plugin.


----------------------------------------------------------------------
SooperLooper Address Space
----------------------------------------------------------------------

SL uses generic methods for functions and parameters.  To invoke
functions you call down, up, or hit with a name argument.

  /sl/#/down s:cmdname
    command press

  /sl/#/up s:cmdname
    command release

  /sl/#/forceup s:cmdname
    forced release to do SUS-like actions

  /sl/#/hit s:cmdname
    A single hit only, no press-release action

I don't see the advantage here, you still have to do a hash loopup
on the string arg.  Don't understand the difference between up and
forceup.

To set parameters:

  /sl/#/set  s:control  f:value
     To set a parameter for a loop.

Each "control" defines a range of values.  We will have to do the same.

To get parameters:

  /sl/#/get  s:control  s:return_url  s: return_path

    Which returns an OSC message to the given return url and path with
    the arguments:
        i:loop_index  s:control  f:value

At minimum the URL would have to be a UDB port number, I supppose
it could be smart enough for other protocols: http://foo:8080,
udp://foo:9000.  The return_path is the OSC address of the receiver.

I hadn't thought about querying status, that does make the URL approach
awkward since we don't have a RESTish method for GET/PUT.  Could do:

   /mobius/global/feedback/get

or 

   /mobius/get/global/feedback

I can see uses for a get method but I like automated export better.
This does however mean that we need *reverse* mappings on export.

SL also have a few special get "controls" that aren't actually parameters,
there more like what we could call Variables:

  state   ::   -1 = unknown,
		0 = Off
		1 = WaitStart
		2 = Recording
		3 = WaitStop
		4 = Playing
		5 = Overdubbing
		6 = Multiplying
		7 = Inserting
		8 = Replacing
		9 = Delay
		10 = Muted
		11 = Scratching
		12 = OneShot
		13 = Substitute
		14 = Paused

 next_state  :: same as state

  loop_len  :: in seconds
  loop_pos  :: in seconds
  cycle_len :: in seconds
  free_time :: in seconds
  total_time :: in seconds
  rate_output 
  in_peak_meter  :: absolute float sample value 0.0 -> 1.0 (or higher)
  out_peak_meter  :: absolute float sample value 0.0 -> 1.0 (or higher)
  is_soloed       :: 1 if soloed, 0 if not

Again these could be exports but since they can't be set there
would be no input mappings for them so auto-export of input mappings
wouldn't work, they would need explicit exports.  This isn't so good
for things like loop_pos which change all the time, for those it would
be better to make the client poll.

SL has a few methods for saving and loading loops and sessions, 
interesting.

SAVE/LOAD

  /sl/#/load_loop   s:filename  s:return_url  s:error_path
     loads a given filename into loop, may return error to error_path

  /sl/#/save_loop   s:filename  s:format  s:endian  s:return_url  s:error_path
     saves current loop to given filename, may return error to error_path
     format and endian currently ignored, always uses 32 bit IEEE float WAV

  /save_session   s:filename  s:return_url  s:error_path
     saves current session description to filename.

  /load_session   s:filename  s:return_url  s:error_path
     loads and replaces the current session from filename.

In our world it would fit better if loops/projectds you wanted to load
were registered as binding targets.  Then you did something like:

    /mobius/1/load/foo
      - load loop file registered as "foo" into current loop of track 1

    /mobius/1/1/load/foo
      - explicit track and loop numbers

Not sure I like this so much, you could do the same things (and more)
by invoking a script:

    /mobius/global/function/Load+Loop+Foo

Using scripts is also a nice way to calculate interesting return values:

    /mobius/get/script/CalculateSomething


In addition to "get" methods SL also lets you register for things.
This is similar to the OscExport but can be done programatically!

  The following messages register and unregister from update events
  which will be sent the returl and retpath specified.  The update OSC message
  has the following parameters:
     i:loop#  s:ctrl  f:control_value

  /sl/#/register_update  s:ctrl s:returl s:retpath
  /sl/#/unregister_update  s:ctrl s:returl s:retpath

     registers/unregisters to receive updates for a given input control when
     any other client changes it.

  /sl/#/register_auto_update  s:ctrl i:ms_interval s:returl s:retpath
  /sl/#/unregister_auto_update  s:ctrl s:returl s:retpath

    registers/unregisters for automatic repeated updates at the given
    interval (currently ignored, and always at 100ms intervals).
    This is handy for receiving updates for output controls such as state
    and position.  The message is only sent if the control has changed since the
    last send.
 
  /register_update  s:ctrl s:returl s:retpath
  /unregister_update  s:ctrl s:returl s:retpath
  /register_auto_update  s:ctrl i:ms_interval s:returl s:retpath
  /unregister_auto_update  s:ctrl s:returl s:retpath

Need to think about this.  This sort of thing is necessary if you
really wanted to sepearate the UI.

----------------------------------------------------------------------
OSC Address Mapping
----------------------------------------------------------------------

To use TouchOSC with Mobius some form of address mapping will need
to be defined.

Unfortunately we can't know which layout TouchOSC is using so there
would have to be multiple configurations if we wanted to use all of them.
That's okay since if we wanted to use any other device along with 
TouchOSC we will need multiple configurations.  The funny thing here
is that some are mutex and some aren't.  Say a TouchOSC and a Monome.
Only one TouchOSC layout config can be active at a time but both the
TouchOSC config and the monome config can be active.

<OscConfig mapping='TouchOSC Beatbox'>

  <OscMapping name='TouchOSC Beatbox'>

    <OscAdress in='/1/fader1' type='control' 
      out='/mobius/global/control/feedback'/>

    <OscAdress in='/1/fader2' type='control' 
      out='/mobius/global/control/output'/>

  </OscMapping>

</OscConfig>

Similar to a Binding except the "value" would be an address path
rather than a number:

  <Binding target='control' scope='global' name='feedback'
     trigger='osc' value='/1/fader1'/>

Dislike overloading value for this since it is almost always an integer.
Add "path" or something?

Hmm, OscAddress is nice because there is an input path and a way
to type what the input path is (control, momentary, toggle), with 
all other binding triggers, the trigger defines this, OSC is different.
If we used Binding would have to extend that to include the trigger type:

  <Binding target='control' scope='global' name='feedback'
     trigger='osc' triggerType='control' value='/1/fader1'/>

The downside of OscAddress is that the output path still has to be parsed
into scope/target/name values which Binding already gives us.  Not that
big a deal since we have to be able to parse anyway, but if we have
a consistent path syntax, then why not use this for all bindings?

  <Binding target='/mobius/global/control/feedback'
     trigger='host' value='2'/>

  <Binding target='/mobius/global/control/feedback'
     trigger='osc' value='/1/fader2'/>

The target URL is very interesting.  Combining MIDI/key/host bindings
with OSC is still strange because we will most definately
need several OSC mappings and possibly several active at the same time.
So we could reuse <Binding> but would need different containers.

Accepting arbitrary Mobius address space methods will require
either a hash or parsing and optimized lookup of the target. Example

    /global/function/record

       - need to isolate, global, function, and record

       - global is compared directly if not a number or letter,
         relatively simple conversion to a scope

       - function must be converted to a Target constant, requires
         a linear search or hash
	 
       - once we know the Target we have to locate the Function, Controller,
         Parameter, etc.  This is currently a linear search which is BAD.

       - If we have to create a hash directionary for the Target names,
         then we may as well create a dictionary for the entire OSC path?
	 It would be expensive calculating the first one, then optimized.

       - Cache could be created up front if we required registration but that's
         a pain, I doubt other OSC servers require that.

If we have to have an optimized target path resolver for OSC then
we may as well use this for all bindings!

This isn't necessary if we're doing OSC message mapping.  The mappings
have to all be predefined so we can resolve them at start time.

Export Mapping

In order to provide basic feedback the OSC export needs to allow
mapping from the Mobius address space to something else:

  <OscExports>
     <OscExport method='/mobius/global/control/feedback'
        host='127.x.x.x' port='9000'
        destination='/3/fader1'/>
  </OscExports>

But this could all be automatic if you had OscMappings since we can
assume anything mapped that can be exported will be exported 
automatically, like plugin parameters?

Or we could add a bidirectional flag to Binding

  <Binding target='/mobius/global/control/feedback'
     trigger='osc' triggerType='control' value='/1/fader1'
     bidirectional='true'/>

The bidirectional flag indicates that we will export the value
of the global feedback control to /1/fader1 when it changes.  Bidirectional
MIDI is currently done by just assuming that all mapped controls need feedback, 
could do the same here but would need to use triggerType to determine
if the trigger is a control.

OSC output also needs to know a host and port, if we had an OscConfig
it could go there, otherwise it would have to be a global parameter.

<OscExports> has a fatal problem though, you only want to export
things for the active configs.  For Touch OSC each "layout" uses the
same methods for different things, e.g. BeatBox /3/fader1 may be
different for other layouts.  We can only export things for the current
layout.  

I'm really liking a "url" for every bindable thing that can be parsed
down to it's parts (scope, targetType, name).  This can also be
used for read-only varialbes:
    
    /mobius/global/variable/loopFrames
    /mobius/1/2/variable/loopFrames

Hmm, the second example points out the need to address not
only tracks (1) but also loops (2).  We haven't had this in any
other binding examples since settable things are almost always
done against the active loop.  But to create a OSC-based UI
that shows the status of non-active loops we need to be able
to specify a loop.

With URLs, OSC is natural and all other binding triggers
can be handled in the same way.  


I'm linking reusing Binding but wrapping it inside an OscConfig.

<OscConfig>

  <OscBindings name='TouchOSC Beatbox' active='true'>

    <Binding target='/mobius/global/control/feedback'
       trigger='osc' triggerType='control' value='/1/fader2'/>

  </OscMapping>

</OscConfig>

If we only have these in <OscBindings> then trigger='osc' is 
redundant, add it if not there at runtime.  

Still an issue for OSC output, if we have only one we could put
it here:

  <OscConfig outputHost='127.x.x.x' ouputPort='9000'>

But in theory we could have more than one.  Just having them all
global:

  <OscConfig>
    <OscListener host='127.x.x.x' port='9000'/>
    <OscListener host='127.y.y.y' port='4000'/>

might cause broadcasts to things that aren't being used.  Forcing
these to be organized by binding set is better:

<OscConfig>
  <OscBindings name='TouchOSC Beatbox' active='true'
    host='127.x.x.x' port='9000'>

We would only broadcast to clients in active binding sets.  There
are two problems with this:

  - have to duplicate host/port in every binding set
  - sets can have bindings from more than one client

Sets with more than one client are possible, but it can just be stated
that a set can only have one broadcast client which would tend to 
force the user to organize them.  

Explicit export declarations are more flexible:

  <OscExports>
     <OscExport method='/mobius/global/control/feedback'
        host='127.x.x.x' port='9000'
        destination='/3/fader1'/>
  </OscExports>

but tedious to set up if you just want bidirectional controls.

Setting an *input* port on a binding set could be used to have
different bindings for several clients that send the same messages.
For example, two TouchOSC's one sending on 7000 and one on 7001.
In theory two musicians could be in control over a different set
of tracks.  This is less likely but keep the option open, it fits
nicely with having a broadcast port for each set.  It would require
that oscpack be able to tell us what port the message came from, 
not sure if that's possible.

----------------------------------------------------------------------
Model Changes
----------------------------------------------------------------------

Global Parameters

   osc input port
      - when non-zero we listen for UDP OSC messages on that port
      - can be overridden in the OscBindings (unusual)

   osc output host
   osc output port
     - when set we send UDP status messages

OscConfig
  - only one of these, mainatined inside MobiusConfig
  - has a list of OscBindingSet objectsd
  - has a list of OscExport derived from the active OscBindingSet objects
  - possible filters or parsing options for incomming messages

OscBindingSet
   - optional osc input and output host/port that override the global
     parameters
   - named object
   - active/inactive flag
   - list of Binding objects

OscExport
  - derived from the active OscBindingSet objects
  - a Mobius OSC path
  - resolution info?  Would be nice not to have to make the
    equivalant of a RuntimeBinding to keep the definition and runtime
    models seperate



