Plugin Handling

Variables:

  Latency 
    Does the plugin introduce buffering that results in added latency.
    Buffering products gaps in the stream if not compensated.

  Edge Fades
    The plugin will preserve zero crossings of the signal at the leading
    and trailing edges.  The waveform itself may be altered significantly,
    but it will still rise from zero and taper to zero at the edges.  
    
  Seamless Parameter Changes
    Changes made to plugin parameters as it is operating may result in
    a discontinuity of the waveform.  A seamless parameter change results in
    no discontinuity.  

In the first set of cases, assume there is no attempt at plugin latency compensation.  The first two variables present problems during the activation and deactivation of the plugin.  The third presents problems during the operation of the plugin.  Combinations of the first two variables can be addressed seperately from the third.


Case 1 : No latency, Edge Fades

This is the ideal.  Content passes directly from the stream through the plugin to the audio device with no additional processing.  

An example might be a simple attenuator provided that the plugin did its own internal smoothing for jumps in attenuation.


Case 2 : Latency, Edge Fades

The more realistic state.  Plugin will do some amount of buffering but zero crossings at the edges are maintained and parameter changes can be done without cross fades.

The latency requires the following adjustments:

  1) Activating the plugin

     A gap will be inserted into the output stream.  

       - An up fade must be applied to the content being sent into the
         plugin (or the plugin must do this itself) to deal with the
         trailing edge of the gap.
         TERM: Plugin Input Fade

       - A a fade tail from the curent position must be captured and played
         to deal with the leading edge of the gap.   This is a special fade
         tail that is *not sent through the plugin*.
         The tail must be added to the interrupt block in parallel with 
         the output of the plugin, which will be zero if plugin latency
         is greater than the fade range.
         TERM: Outside Fade Tail

  2) Deactivating the plugin

     A forward jump will be made in the output stream, with some loss
     of content.  

     - An up fade must be applied to the content being played to deal
       with the trailing edge of the splice.
       TERM: Normal Fade Up

     - A fade tail from the current position must be captured and
       sent through the plugin.  The plugin must then be allowed
       to "drain" up to the end of the tail.
       TERM: Draining Fade Tail

       - ALT: If plugin latency is greater than the fade range, feed
         zeros into the plugin until enough content is available, apply
         a down fade, then set this content as the fade tail.  
         If plugin latency is less than the fade range, capture a tail
         (not necessarily faded) and send it through the plugin rather
         than zeroes.
         TERM: Buffered Fade Tail

Case 3 : No Latency, No Edge Fades

  1) Activating plugin
     An instant discontinuity in the wave form.

     - An outside fade tail must be captured to address the leading edge.
       (same as case 2)

     - An up fade must be applied immediately to the output from the plugin 
       to address the trailing edge.
       Fade state may need to be maintained over several interrupts.
       TERM: Plugin Output Fade

  2) Deactivating plugin

     - A normal fade up must be applied to address the trailing edge.
       (same as case 2)

     - A buffered fade tail must be taken from the plugin to address
       the leading edge.
       (same as case 2)

Case 4 : Latency, No Edge Fades

This appears to be the situation with the SoundTouch pitch shifting algorithm.

  1) Activating plugin
     A gap will be inserted into the output stream.  

     - An outside fade tail must be captured to address the leading edge.
       (same as case 2, 3)

     - An up fade must be applied to the output from the plugin, but
       only after the latency period.  Can be accomplished by triggering
       the fade on the first non-zero sample after the activation.
       TERM: Delayed Plugin Output Fade

  2) Deactivating plugin

     - A normal fade up must be applied to address the trailing edge.
       (same as case 2, 3)

     - A buffered fade tail must be taken from the plugin to address the
        leading edge.
       (same as case 2, 3)


Since we can use a Buffered Fade Tail in all cases and a Draining Fade Tail only in one, use a Buffered Fade Tail always. Note that this will result in a redundant fade if we use the normal fade tail capture method to insert the tail into the plugin, and the plugin preserves edge fades.

Seamless Parameter Changes

In the event that parameter changes are not seamless, one of two 
situations may occur:

  - latency is increased resulting in a gap
  - latency is decreased resulting in a jump
  - the change in algorithm causes a discontinuity

The result is similar to deactivating and reactivating the plugin on exactly the same frame.

  - A buffered fade tail is taken from the plugin to address the leading edge.
  - the plugin buffers are flushed, if necessary by feeding zeros
  - A delayed plugin output fade is applied after feeding the new content

----------------------------------------------------------------------
Key Concepts:

* Outside Fade Tail

  A fade tail that is captured and merged with the other content
  gathered by the output stream, but without passing through any plugins.
  The tail will already have been processed by the plugins when it 
  was captured.

* Plugin Shutdown Fade

The production of an orderly fade to zero from the current state of a plugin.  The plugin may or may not be buffering, and if buffering there may or may not be enough in the buffer to fill the fade range.  

  - Enough content from the source layer must be fed into the 
    plugin to produce enough content to fill the fade range.  
  - The content being fed into the plugin during this period is not faded
  - Once the plugin contains enough content, it is extrated, then faded, 
    then buffered for merging with the other output stream content
    (an outside tail)
  - The generation of this outside fade tail must happen instantly
  - The plugin is then flushed so that the next request for content
    would return zeros
  - requires another buffer for the tail capture

* Plugin Startup Fade
  - The plugin must be in a flushed state
  - New content begins feeding into the plugin
  - The output of the plugin is monitored until the first non-zero sample
    is detected
  - On detction of the first non-zero sample, an up fade is applied
  - The up fade completes, the plugin proceeds normally
  - requires another buffer for processing during the fade up period

This one is more complicated than the others.  The effect is similar to a layer play fade in that progress through the fade range must be maintained in the stream and incremented on each interrupt.

* Overlapping Plugin Fades

Ocurrs when a Plugin Startup Fade is initiated, then a Plugin 
Shutdown Fade is needed before the startup fade has completed.

  - if we're still waiting for the first non-zero frame, then both
    fades can be canceled

  - if we're into the startup fade, we must continue to apply this
    fade as we capture the content for the shutdown fade

  - it would be architecturally cleaner to push the maintenance of
    the startup fade into the plugin or a plugin wrapper?

----------------------------------------------------------------------
Plugin Latency Compensation

1) Plugin Activation

There will be a sudden increase in overall latency.  Frames extracted from the layers will be piped through the plugins resulting in percieved 
delay.  

   L = IL + PL + OL

Or to make calculations in Loop easier, OL = PL + AIOL where
PL = Plugin Latency and AIOL = Audio Interface Output Latency.

Predictave compensation is difficult.  

----------------------------------------------------------------------
Immediate needs

1) Activate plugin (pitch moves from zero)

  - capture outside layer fade tail
  - start plugin startup fade

2) Change pitch

  - capture plugin shutdown outside fade tail
  - flush plugin
  - start plugin startup fade

3) Deactivate plugin (pitch returns to zero)

  - capture plugin shutdown outside fade tail
  - flush plugin
  - start layer play fade in


         
     

